from aiogram import Router, F
from aiogram.types import Message, CallbackQuery

from keyboards.task.inline import get_task_manager_markup
from dao import TaskDAO
from keyboards.base.reply import get_menu_markup
from states import base_states, task_states
from utils import fsm
from responses import task as task_responses
from keyboards.base.inline import get_confirmation_keyboard_markup

task_router = Router()


# ------------------- region –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ -------------------
@task_router.message(
    F.text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É‚ûï",
    lambda message: fsm.get_state(message.from_user.id) == base_states.IN_MENU,
)
async def handle_wait_for_task_title(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏.

    –ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", –±–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–¥–∞—á–∏.
    """
    telegram_id = message.from_user.id

    fsm.set_state(telegram_id=telegram_id, state=task_states.WAIT_FOR_TASK_TITLE)

    await message.answer(text=task_responses.REQUEST_FOR_TASK_TITLE)


@task_router.message(
    F.content_type == "text",
    lambda message: fsm.get_state(message.from_user.id) == task_states.WAIT_FOR_TASK_TITLE,
)
async def handle_task_title(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–ø—Ä–æ—Å—É –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.

    –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏, –±–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –¥–ª–∏–Ω—É –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ.
    """
    task_title = message.text
    telegram_id = message.from_user.id

    if len(task_title) > 80:
        await message.answer(text=task_responses.LEN_OF_TITLE_CANT_BE_MORE_THAN_EIGHTY)
        return None

    fsm.set_data(telegram_id=telegram_id, key="task_title", value=task_title)
    fsm.set_state(telegram_id=telegram_id, state=task_states.SUBMIT_TITLE)

    await message.answer(
        text="–í—ã —É–≤–µ—Ä–µ–Ω—ã –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∑–∞–¥–∞—á–∏ ?",
        reply_markup=get_confirmation_keyboard_markup(),
    )


@task_router.callback_query(
    F.data.in_(["confirm", "cancel"]),
    lambda callback: fsm.get_state(callback.from_user.id) == task_states.SUBMIT_TITLE,
)
async def handle_confirm_or_cancel_task_title(callback: CallbackQuery) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∑–∞–¥–∞—á–∏.

    –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω, –±–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ,
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –∑–∞–ø—Ä–æ—Å—É –∑–∞–≥–æ–ª–æ–≤–∫–∞.
    """
    telegram_id = callback.from_user.id

    if callback.data == "confirm":
        fsm.set_state(
            telegram_id=telegram_id, state=task_states.WAIT_FOR_TASK_DESCRIPTION
        )
        await callback.message.answer(text=task_responses.REQUEST_FOR_TASK_DESCRIPTION)
        await callback.answer()
    else:
        fsm.set_state(telegram_id=telegram_id, state=task_states.WAIT_FOR_TASK_TITLE)
        await callback.message.answer(text=task_responses.REQUEST_FOR_TASK_TITLE)
        await callback.answer()


@task_router.message(
    F.content_type == "text",
    lambda message: fsm.get_state(message.from_user.id) == task_states.WAIT_FOR_TASK_DESCRIPTION,
)
async def handle_task_description(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.

    –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è, –±–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∏.
    """
    task_description = message.text
    telegram_id = message.from_user.id

    fsm.set_data(
        telegram_id=telegram_id, key="task_description", value=task_description
    )
    fsm.set_state(telegram_id=telegram_id, state=task_states.SUBMIT_DESCRIPTION)

    await message.answer(
        text="–í—ã —É–≤–µ—Ä–µ–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏ ?",
        reply_markup=get_confirmation_keyboard_markup(),
    )


@task_router.callback_query(
    F.data.in_(["confirm", "cancel"]),
    lambda callback: fsm.get_state(callback.from_user.id) == task_states.SUBMIT_DESCRIPTION,
)
async def handle_confirm_or_cancel_task_description(callback: CallbackQuery) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏.

    –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ, –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –∑–∞–ø—Ä–æ—Å—É –æ–ø–∏—Å–∞–Ω–∏—è.
    """
    telegram_id = callback.from_user.id

    if callback.data == "confirm":
        data_for_task = {
            "task_title": fsm.get_data(telegram_id, key="task_title"),
            "task_description": fsm.get_data(telegram_id, key="task_description"),
        }
        TaskDAO.add_new_task(telegram_id=telegram_id, data=data_for_task)
        fsm.set_state(telegram_id=telegram_id, state=base_states.IN_MENU)
        await callback.message.answer(
            text=task_responses.TASK_SUCCESSFULLY_ADDED, reply_markup=get_menu_markup()
        )
        await callback.answer()
    else:
        fsm.set_state(
            telegram_id=telegram_id, state=task_states.WAIT_FOR_TASK_DESCRIPTION
        )
        await callback.message.answer(text=task_responses.REQUEST_FOR_TASK_DESCRIPTION)
        await callback.answer()


# ------------------- endregion –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ -------------------

# ------------------- region –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á -------------------
@task_router.message(
    F.text == "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—áüóì",
    lambda message: fsm.get_state(message.from_user.id) == base_states.IN_MENU,
)
async def handle_get_list_of_tasks(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    –ë–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
    """
    telegram_id = message.from_user.id
    tasks = TaskDAO.get_all_tasks(telegram_id=telegram_id)
    fsm.set_state(telegram_id=telegram_id, state=task_states.LOOK_AT_TASKS)

    if not tasks:
        await message.answer(text=task_responses.YOU_HAVE_NOT_ANY_TASK)
        return

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É
    current_task_number = 1
    await display_task(message, tasks, current_task_number)


async def display_task(message: Message, tasks: list, current_task_number: int):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–µ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
    """
    last_task_number = len(tasks)

    task_title = tasks[current_task_number - 1]['title']
    task_description = tasks[current_task_number - 1]['description']

    await message.answer(
        text=f"–ó–∞–¥–∞—á–∞: <b>{task_title}</b>\n\n"
             f"–û–ø–∏—Å–∞–Ω–∏–µ: {task_description}",
        reply_markup=get_task_manager_markup(current_task_number, last_task_number),
    )


@task_router.callback_query(
    F.data.in_(["back", "next", "task_completed", "delete_task", "confirm", "cancel"]),
    lambda callback: fsm.get_state(callback.from_user.id) == task_states.LOOK_AT_TASKS,
)
async def handle_task_navigation(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
    telegram_id = callback.from_user.id
    tasks = TaskDAO.get_all_tasks(telegram_id=telegram_id)
    last_task_number = len(tasks)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    current_task_number = fsm.get_data(telegram_id, key="current_task_number") or 1

    task_id = tasks[current_task_number - 1]["id"]

    if callback.data == "delete_task":
        fsm.set_data(telegram_id, key="current_task_number", value=current_task_number)
        fsm.set_data(telegram_id, key="last_task_number", value=last_task_number)
        fsm.set_data(telegram_id, key="task_id_to_delete", value=task_id)
        task_title = tasks[current_task_number - 1]['title']

        await callback.message.answer(
            text=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É: \n\n<b>{task_title}</b> ?",
            reply_markup=get_confirmation_keyboard_markup(),
        )
        fsm.set_state(telegram_id=telegram_id, state=task_states.SUBMIT_DELETE_TASK)
        await callback.answer()
        return

    if callback.data == "task_completed":
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
        TaskDAO.mark_task_as_completed(telegram_id=telegram_id, task_id=task_id)
        fsm.set_data(telegram_id, key="current_task_number", value=current_task_number)
        fsm.set_data(telegram_id, key="last_task_number", value=last_task_number)
        await callback.message.answer(text=task_responses.TASK_SUCCESSFULLY_COMPLETED, reply_markup=get_menu_markup())
        await callback.answer()
        return
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ–π –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    task_title = tasks[current_task_number - 1]['title']
    task_description = tasks[current_task_number - 1]['description']

    # –ò–∑–º–µ–Ω—è–µ–º current_task_number –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ–π—Å—Ç–≤–∏—è
    if callback.data == "next":
        current_task_number += 1 if current_task_number < last_task_number else 0
    elif callback.data == "back":
        current_task_number -= 1 if current_task_number > 1 else 0

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    fsm.set_data(telegram_id, key="current_task_number", value=current_task_number)

    await callback.message.edit_text(
        text=f"–ó–∞–¥–∞—á–∞: <b>{task_title}</b>\n\n"
             f"–û–ø–∏—Å–∞–Ω–∏–µ: {task_description}",
        reply_markup=get_task_manager_markup(current_task_number, last_task_number),
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
@task_router.callback_query(
    F.data.in_(["confirm", "cancel"]),
    lambda callback: fsm.get_state(callback.from_user.id) == task_states.SUBMIT_DELETE_TASK,
)
async def handle_confirm_or_cancel_delete_task(callback: CallbackQuery) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.

    –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞, –±–æ—Ç —É–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω–∞—á–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    telegram_id = callback.from_user.id

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    current_task_number = fsm.get_data(telegram_id, key="current_task_number")
    last_task_number = fsm.get_data(telegram_id, key="last_task_number")

    if callback.data == "confirm":
        task_id = fsm.get_data(telegram_id, key="task_id_to_delete")
        TaskDAO.delete_task(telegram_id=telegram_id, task_id=task_id)
        fsm.set_state(telegram_id=telegram_id, state=base_states.IN_MENU)
        await callback.message.answer(
            text=task_responses.TASK_SUCCESSFULLY_DELETED, reply_markup=get_menu_markup()
        )
    else:
        fsm.set_state(telegram_id=telegram_id, state=task_states.LOOK_AT_TASKS)
        await callback.message.answer(
            "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_task_manager_markup(current_task_number, last_task_number)
        )

    await callback.answer()
# ------------------- endregion –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á -------------------
